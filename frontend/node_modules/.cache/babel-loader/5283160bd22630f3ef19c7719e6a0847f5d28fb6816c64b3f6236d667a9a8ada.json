{"ast":null,"code":"import axios from 'axios';\nexport const api = axios.create({\n  baseURL: 'http://localhost:8000'\n});\n\n// Chat API functions\nexport const chatAPI = {\n  getChats: () => api.get('/chats'),\n  createChat: title => api.post('/chats', {\n    title\n  }),\n  getChatMessages: chatId => api.get(`/chats/${chatId}/messages`),\n  sendMessage: (chatId, content) => api.post(`/chats/${chatId}/messages`, {\n    content,\n    role: 'user'\n  }),\n  generateChatTitle: chatId => api.post(`/chats/${chatId}/generate-title`),\n  getChatContext: chatId => api.get(`/chats/${chatId}/context`),\n  healthCheck: () => api.get('/health')\n};\n\n// Notion API functions\nexport const notionAPI = {\n  getSettings: () => api.get('/notion/settings'),\n  updateSettings: settings => api.post('/notion/settings', settings),\n  testConnection: settings => api.post('/notion/test-connection', settings),\n  uploadFile: (file, pageType, onUploadProgress) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('page_type', pageType);\n    return api.post('/notion/upload-file', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress\n    });\n  },\n  startImport: forceUpdate => api.post(`/notion/import?force_update=${forceUpdate}`, {}, {\n    responseType: 'stream'\n  }),\n  getImportStatus: () => api.get('/notion/import-status'),\n  getPages: (pageType, limit = 100, offset = 0) => api.get('/notion/pages', {\n    params: {\n      page_type: pageType,\n      limit,\n      offset\n    }\n  }),\n  getPageDetails: pageId => api.get(`/notion/pages/${pageId}`),\n  searchPages: (searchTerm, pageType, limit = 50) => api.post('/notion/pages/search', {\n    search_term: searchTerm,\n    page_type: pageType,\n    limit\n  }),\n  getStats: () => api.get('/notion/stats'),\n  deleteData: () => api.delete('/notion/data')\n};\n\n// PRD API functions for database operations\n\nexport const prdAPI = {\n  // Create a new PRD\n  createPRD: prd => api.post('/prds/', prd),\n  // Get all PRDs for the current user\n  getPRDs: (skip = 0, limit = 100) => api.get('/prds/', {\n    params: {\n      skip,\n      limit\n    }\n  }),\n  // Get a specific PRD by ID\n  getPRD: prdId => api.get(`/prds/${prdId}`),\n  // Update a PRD\n  updatePRD: (prdId, prdUpdate) => api.put(`/prds/${prdId}`, prdUpdate),\n  // Delete a PRD\n  deletePRD: prdId => api.delete(`/prds/${prdId}`)\n};","map":{"version":3,"names":["axios","api","create","baseURL","chatAPI","getChats","get","createChat","title","post","getChatMessages","chatId","sendMessage","content","role","generateChatTitle","getChatContext","healthCheck","notionAPI","getSettings","updateSettings","settings","testConnection","uploadFile","file","pageType","onUploadProgress","formData","FormData","append","headers","startImport","forceUpdate","responseType","getImportStatus","getPages","limit","offset","params","page_type","getPageDetails","pageId","searchPages","searchTerm","search_term","getStats","deleteData","delete","prdAPI","createPRD","prd","getPRDs","skip","getPRD","prdId","updatePRD","prdUpdate","put","deletePRD"],"sources":["/Users/konstantinvaliotti/prdreview/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { \n  Chat, \n  Message, \n  NotionSettings, \n  NotionSettingsUpdate, \n  NotionPage, \n  NotionPageWithDetails,\n  ImportStatusResponse,\n  KnowledgeBaseStats,\n  PageSearchResponse,\n  TestConnectionResponse,\n  PageType\n} from '../types';\n\nexport const api = axios.create({\n  baseURL: 'http://localhost:8000',\n});\n\n// Chat API functions\nexport const chatAPI = {\n  getChats: () => api.get<Chat[]>('/chats'),\n  \n  createChat: (title: string) => \n    api.post<Chat>('/chats', { title }),\n  \n  getChatMessages: (chatId: number) => \n    api.get<Message[]>(`/chats/${chatId}/messages`),\n  \n  sendMessage: (chatId: number, content: string) => \n    api.post<{ message: string }>(`/chats/${chatId}/messages`, {\n      content,\n      role: 'user'\n    }),\n  \n  generateChatTitle: (chatId: number) =>\n    api.post<{ title: string }>(`/chats/${chatId}/generate-title`),\n  \n  getChatContext: (chatId: number) =>\n    api.get<{ chat_id: number; title: string; context: any }>(`/chats/${chatId}/context`),\n  \n  healthCheck: () =>\n    api.get<{ status: string; services: any; version: string }>('/health'),\n};\n\n// Notion API functions\nexport const notionAPI = {\n  getSettings: () => \n    api.get<NotionSettings>('/notion/settings'),\n    \n  updateSettings: (settings: NotionSettingsUpdate) =>\n    api.post<NotionSettings>('/notion/settings', settings),\n\n  testConnection: (settings: NotionSettingsUpdate) =>\n    api.post<TestConnectionResponse>('/notion/test-connection', settings),\n    \n  uploadFile: (file: File, pageType: PageType, onUploadProgress: (progressEvent: any) => void) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('page_type', pageType);\n\n    return api.post('/notion/upload-file', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress,\n    });\n  },\n\n  startImport: (forceUpdate: boolean) =>\n    api.post(`/notion/import?force_update=${forceUpdate}`, {}, { \n      responseType: 'stream' \n    }),\n\n  getImportStatus: () =>\n    api.get<ImportStatusResponse>('/notion/import-status'),\n\n  getPages: (pageType?: PageType, limit: number = 100, offset: number = 0) =>\n    api.get<NotionPage[]>('/notion/pages', { \n      params: { page_type: pageType, limit, offset } \n    }),\n\n  getPageDetails: (pageId: number) =>\n    api.get<NotionPageWithDetails>(`/notion/pages/${pageId}`),\n    \n  searchPages: (searchTerm: string, pageType?: PageType, limit: number = 50) =>\n    api.post<PageSearchResponse>('/notion/pages/search', {\n      search_term: searchTerm,\n      page_type: pageType,\n      limit,\n    }),\n    \n  getStats: () =>\n    api.get<KnowledgeBaseStats>('/notion/stats'),\n    \n  deleteData: () =>\n    api.delete('/notion/data'),\n};\n\n// PRD API functions for database operations\nexport interface PRDCreate {\n  title: string;\n  content?: string;\n}\n\nexport interface PRDUpdate {\n  title?: string;\n  content?: string;\n}\n\nexport interface PRDResponse {\n  id: number;\n  user_id: number;\n  title: string;\n  content: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport const prdAPI = {\n  // Create a new PRD\n  createPRD: (prd: PRDCreate) =>\n    api.post<PRDResponse>('/prds/', prd),\n  \n  // Get all PRDs for the current user\n  getPRDs: (skip: number = 0, limit: number = 100) =>\n    api.get<PRDResponse[]>('/prds/', { params: { skip, limit } }),\n  \n  // Get a specific PRD by ID\n  getPRD: (prdId: number) =>\n    api.get<PRDResponse>(`/prds/${prdId}`),\n  \n  // Update a PRD\n  updatePRD: (prdId: number, prdUpdate: PRDUpdate) =>\n    api.put<PRDResponse>(`/prds/${prdId}`, prdUpdate),\n  \n  // Delete a PRD\n  deletePRD: (prdId: number) =>\n    api.delete(`/prds/${prdId}`),\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}