{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{Link}from'react-router-dom';import{useAuth}from'../context/AuthContext';import{chatAPI}from'../services/api';import'./ChatInterface.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ChatInterface=()=>{const{user,logout}=useAuth();const[chats,setChats]=useState([]);const[selectedChat,setSelectedChat]=useState(null);const[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState('');const[loading,setLoading]=useState(false);const[newChatTitle,setNewChatTitle]=useState('');const[showNewChatModal,setShowNewChatModal]=useState(false);const[showChatSettings,setShowChatSettings]=useState(false);const[regeneratingTitle,setRegeneratingTitle]=useState(false);const messagesEndRef=useRef(null);useEffect(()=>{fetchChats();checkHealth();},[]);useEffect(()=>{scrollToBottom();},[messages]);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};const checkHealth=async()=>{try{const response=await chatAPI.healthCheck();console.log('API Health:',response.data);}catch(error){console.error('Health check failed:',error);}};const fetchChats=async()=>{try{const response=await chatAPI.getChats();setChats(response.data);}catch(error){console.error('Failed to fetch chats:',error);}};const fetchMessages=async chatId=>{try{const response=await chatAPI.getChatMessages(chatId);setMessages(response.data);}catch(error){console.error('Failed to fetch messages:',error);}};const handleChatSelect=chat=>{setSelectedChat(chat);setShowChatSettings(false);fetchMessages(chat.id);};const handleCreateChat=async()=>{if(!newChatTitle.trim())return;try{const response=await chatAPI.createChat(newChatTitle);setChats([response.data,...chats]);setSelectedChat(response.data);setMessages([]);setNewChatTitle('');setShowNewChatModal(false);}catch(error){console.error('Failed to create chat:',error);}};const handleRegenerateTitle=async()=>{if(!selectedChat)return;setRegeneratingTitle(true);try{const response=await chatAPI.generateChatTitle(selectedChat.id);const newTitle=response.data.title;// Update selected chat\nsetSelectedChat({...selectedChat,title:newTitle});// Update chat in the list\nsetChats(prevChats=>prevChats.map(chat=>chat.id===selectedChat.id?{...chat,title:newTitle}:chat));setShowChatSettings(false);}catch(error){console.error('Failed to regenerate title:',error);}finally{setRegeneratingTitle(false);}};const handleSendMessage=async e=>{e.preventDefault();if(!selectedChat||!newMessage.trim())return;const userMessage=newMessage;setNewMessage('');setLoading(true);// Add user message to UI immediately\nconst tempMessage={id:Date.now(),chat_id:selectedChat.id,role:'user',content:userMessage,created_at:new Date().toISOString()};setMessages(prev=>[...prev,tempMessage]);try{const response=await chatAPI.sendMessage(selectedChat.id,userMessage);// Refresh messages to get the actual saved messages\nawait fetchMessages(selectedChat.id);await fetchChats();// Update chat list to reflect new activity\n}catch(error){console.error('Failed to send message:',error);// Remove the temporary message on error\nsetMessages(prev=>prev.filter(msg=>msg.id!==tempMessage.id));}finally{setLoading(false);}};const formatMessageTime=dateString=>{const date=new Date(dateString);const now=new Date();const diff=now.getTime()-date.getTime();const diffDays=Math.floor(diff/(1000*60*60*24));if(diffDays===0){return date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});}else if(diffDays===1){return'Yesterday '+date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});}else{return date.toLocaleDateString()+' '+date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Conversations\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowNewChatModal(true),children:\"New Chat\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-list\",children:[chats.map(chat=>/*#__PURE__*/_jsxs(\"div\",{className:`chat-item ${(selectedChat===null||selectedChat===void 0?void 0:selectedChat.id)===chat.id?'active':''}`,onClick:()=>handleChatSelect(chat),children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-title\",title:chat.title,children:chat.title}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-meta\",children:[chat.message_count,\" messages \\u2022 \",formatMessageTime(chat.updated_at)]})]},chat.id)),chats.length===0&&/*#__PURE__*/_jsx(\"div\",{className:\"no-chats\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No chats yet. Create your first chat to get started!\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-footer\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"nav-links\",children:[/*#__PURE__*/_jsx(Link,{to:\"/knowledge-base\",children:\"Knowledge Base\"}),/*#__PURE__*/_jsx(Link,{to:\"/settings\",children:\"Settings\"})]}),user&&/*#__PURE__*/_jsxs(\"div\",{className:\"user-info\",children:[/*#__PURE__*/_jsx(\"span\",{children:user.email}),/*#__PURE__*/_jsx(\"button\",{onClick:logout,children:\"Logout\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-main\",children:selectedChat?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:selectedChat.title}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-actions\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowChatSettings(!showChatSettings),className:\"settings-btn\",title:\"Chat settings\",children:\"\\u2699\\uFE0F\"})})]}),showChatSettings&&/*#__PURE__*/_jsxs(\"div\",{className:\"chat-settings\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleRegenerateTitle,disabled:regeneratingTitle,className:\"regenerate-title-btn\",children:regeneratingTitle?'Generating...':'🔄 Regenerate Title'}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-info\",children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Created: \",formatMessageTime(selectedChat.created_at),\" \\u2022 Last updated: \",formatMessageTime(selectedChat.updated_at)]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"messages-container\",children:[messages.length===0&&/*#__PURE__*/_jsx(\"div\",{className:\"no-messages\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"welcome-message\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Welcome to your chat!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Start a conversation by typing a message below.\"})]})}),messages.map(message=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${message.role}`,children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:message.content}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:formatMessageTime(message.created_at)})]},message.id)),loading&&/*#__PURE__*/_jsx(\"div\",{className:\"message assistant\",children:/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"typing-indicator\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),\"AI is thinking...\"]})})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSendMessage,className:\"message-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMessage,onChange:e=>setNewMessage(e.target.value),placeholder:\"Type your message...\",disabled:loading,className:\"message-input\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:loading||!newMessage.trim(),className:\"send-btn\",children:loading?'...':'Send'})]})]}):/*#__PURE__*/_jsx(\"div\",{className:\"no-chat-selected\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"welcome-screen\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to Chat App\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Select a chat from the sidebar to start messaging, or create a new chat to begin.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowNewChatModal(true),className:\"welcome-new-chat-btn\",children:\"Create Your First Chat\"})]})})}),showNewChatModal&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",onClick:()=>setShowNewChatModal(false),children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Create New Chat\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newChatTitle,onChange:e=>setNewChatTitle(e.target.value),placeholder:\"Enter chat title...\",className:\"modal-input\",autoFocus:true,onKeyPress:e=>e.key==='Enter'&&handleCreateChat()}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowNewChatModal(false),className:\"modal-btn cancel\",children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCreateChat,className:\"modal-btn create\",disabled:!newChatTitle.trim(),children:\"Create\"})]})]})})]});};export default ChatInterface;","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","useAuth","chatAPI","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ChatInterface","user","logout","chats","setChats","selectedChat","setSelectedChat","messages","setMessages","newMessage","setNewMessage","loading","setLoading","newChatTitle","setNewChatTitle","showNewChatModal","setShowNewChatModal","showChatSettings","setShowChatSettings","regeneratingTitle","setRegeneratingTitle","messagesEndRef","fetchChats","checkHealth","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","response","healthCheck","console","log","data","error","getChats","fetchMessages","chatId","getChatMessages","handleChatSelect","chat","id","handleCreateChat","trim","createChat","handleRegenerateTitle","generateChatTitle","newTitle","title","prevChats","map","handleSendMessage","e","preventDefault","userMessage","tempMessage","Date","now","chat_id","role","content","created_at","toISOString","prev","sendMessage","filter","msg","formatMessageTime","dateString","date","diff","getTime","diffDays","Math","floor","toLocaleTimeString","hour","minute","toLocaleDateString","className","children","onClick","message_count","updated_at","length","to","email","disabled","message","ref","onSubmit","type","value","onChange","target","placeholder","stopPropagation","autoFocus","onKeyPress","key"],"sources":["/Users/konstantinvaliotti/prdreview/frontend/src/components/ChatInterface.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { chatAPI } from '../services/api';\nimport { Chat, Message } from '../types';\nimport './ChatInterface.css';\n\nconst ChatInterface: React.FC = () => {\n  const { user, logout } = useAuth();\n  const [chats, setChats] = useState<Chat[]>([]);\n  const [selectedChat, setSelectedChat] = useState<Chat | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [newChatTitle, setNewChatTitle] = useState('');\n  const [showNewChatModal, setShowNewChatModal] = useState(false);\n  const [showChatSettings, setShowChatSettings] = useState(false);\n  const [regeneratingTitle, setRegeneratingTitle] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    fetchChats();\n    checkHealth();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const checkHealth = async () => {\n    try {\n      const response = await chatAPI.healthCheck();\n      console.log('API Health:', response.data);\n    } catch (error) {\n      console.error('Health check failed:', error);\n    }\n  };\n\n  const fetchChats = async () => {\n    try {\n      const response = await chatAPI.getChats();\n      setChats(response.data);\n    } catch (error) {\n      console.error('Failed to fetch chats:', error);\n    }\n  };\n\n  const fetchMessages = async (chatId: number) => {\n    try {\n      const response = await chatAPI.getChatMessages(chatId);\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Failed to fetch messages:', error);\n    }\n  };\n\n  const handleChatSelect = (chat: Chat) => {\n    setSelectedChat(chat);\n    setShowChatSettings(false);\n    fetchMessages(chat.id);\n  };\n\n  const handleCreateChat = async () => {\n    if (!newChatTitle.trim()) return;\n\n    try {\n      const response = await chatAPI.createChat(newChatTitle);\n      setChats([response.data, ...chats]);\n      setSelectedChat(response.data);\n      setMessages([]);\n      setNewChatTitle('');\n      setShowNewChatModal(false);\n    } catch (error) {\n      console.error('Failed to create chat:', error);\n    }\n  };\n\n  const handleRegenerateTitle = async () => {\n    if (!selectedChat) return;\n\n    setRegeneratingTitle(true);\n    try {\n      const response = await chatAPI.generateChatTitle(selectedChat.id);\n      const newTitle = response.data.title;\n      \n      // Update selected chat\n      setSelectedChat({ ...selectedChat, title: newTitle });\n      \n      // Update chat in the list\n      setChats(prevChats => \n        prevChats.map(chat => \n          chat.id === selectedChat.id \n            ? { ...chat, title: newTitle }\n            : chat\n        )\n      );\n      \n      setShowChatSettings(false);\n    } catch (error) {\n      console.error('Failed to regenerate title:', error);\n    } finally {\n      setRegeneratingTitle(false);\n    }\n  };\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedChat || !newMessage.trim()) return;\n\n    const userMessage = newMessage;\n    setNewMessage('');\n    setLoading(true);\n\n    // Add user message to UI immediately\n    const tempMessage: Message = {\n      id: Date.now(),\n      chat_id: selectedChat.id,\n      role: 'user',\n      content: userMessage,\n      created_at: new Date().toISOString(),\n    };\n    setMessages(prev => [...prev, tempMessage]);\n\n    try {\n      const response = await chatAPI.sendMessage(selectedChat.id, userMessage);\n      \n      // Refresh messages to get the actual saved messages\n      await fetchMessages(selectedChat.id);\n      await fetchChats(); // Update chat list to reflect new activity\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      // Remove the temporary message on error\n      setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatMessageTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } else if (diffDays === 1) {\n      return 'Yesterday ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } else {\n      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {/* Sidebar */}\n      <div className=\"sidebar\">\n        <div className=\"sidebar-header\">\n          <h2>Conversations</h2>\n          <button onClick={() => setShowNewChatModal(true)}>New Chat</button>\n        </div>\n        <div className=\"chat-list\">\n          {chats.map((chat) => (\n            <div\n              key={chat.id}\n              className={`chat-item ${selectedChat?.id === chat.id ? 'active' : ''}`}\n              onClick={() => handleChatSelect(chat)}\n            >\n              <div className=\"chat-title\" title={chat.title}>{chat.title}</div>\n              <div className=\"chat-meta\">\n                {chat.message_count} messages • {formatMessageTime(chat.updated_at)}\n              </div>\n            </div>\n          ))}\n          {chats.length === 0 && (\n            <div className=\"no-chats\">\n              <p>No chats yet. Create your first chat to get started!</p>\n            </div>\n          )}\n        </div>\n        <div className=\"sidebar-footer\">\n          <div className=\"nav-links\">\n            <Link to=\"/knowledge-base\">Knowledge Base</Link>\n            <Link to=\"/settings\">Settings</Link>\n          </div>\n          {user && (\n            <div className=\"user-info\">\n              <span>{user.email}</span>\n              <button onClick={logout}>Logout</button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Main Chat Area */}\n      <div className=\"chat-main\">\n        {selectedChat ? (\n          <>\n            <div className=\"chat-header\">\n              <div className=\"chat-header-content\">\n                <h2>{selectedChat.title}</h2>\n                <div className=\"chat-actions\">\n                  <button \n                    onClick={() => setShowChatSettings(!showChatSettings)}\n                    className=\"settings-btn\"\n                    title=\"Chat settings\"\n                  >\n                    ⚙️\n                  </button>\n                </div>\n              </div>\n              \n              {showChatSettings && (\n                <div className=\"chat-settings\">\n                  <button \n                    onClick={handleRegenerateTitle}\n                    disabled={regeneratingTitle}\n                    className=\"regenerate-title-btn\"\n                  >\n                    {regeneratingTitle ? 'Generating...' : '🔄 Regenerate Title'}\n                  </button>\n                  <div className=\"chat-info\">\n                    <small>\n                      Created: {formatMessageTime(selectedChat.created_at)} • \n                      Last updated: {formatMessageTime(selectedChat.updated_at)}\n                    </small>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"messages-container\">\n              {messages.length === 0 && (\n                <div className=\"no-messages\">\n                  <div className=\"welcome-message\">\n                    <h3>Welcome to your chat!</h3>\n                    <p>Start a conversation by typing a message below.</p>\n                  </div>\n                </div>\n              )}\n              \n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`message ${message.role}`}\n                >\n                  <div className=\"message-content\">\n                    {message.content}\n                  </div>\n                  <div className=\"message-time\">\n                    {formatMessageTime(message.created_at)}\n                  </div>\n                </div>\n              ))}\n              \n              {loading && (\n                <div className=\"message assistant\">\n                  <div className=\"message-content\">\n                    <div className=\"typing-indicator\">\n                      <span></span>\n                      <span></span>\n                      <span></span>\n                      AI is thinking...\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n\n            <form onSubmit={handleSendMessage} className=\"message-form\">\n              <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                placeholder=\"Type your message...\"\n                disabled={loading}\n                className=\"message-input\"\n              />\n              <button \n                type=\"submit\" \n                disabled={loading || !newMessage.trim()}\n                className=\"send-btn\"\n              >\n                {loading ? '...' : 'Send'}\n              </button>\n            </form>\n          </>\n        ) : (\n          <div className=\"no-chat-selected\">\n            <div className=\"welcome-screen\">\n              <h2>Welcome to Chat App</h2>\n              <p>Select a chat from the sidebar to start messaging, or create a new chat to begin.</p>\n              <button \n                onClick={() => setShowNewChatModal(true)}\n                className=\"welcome-new-chat-btn\"\n              >\n                Create Your First Chat\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* New Chat Modal */}\n      {showNewChatModal && (\n        <div className=\"modal-overlay\" onClick={() => setShowNewChatModal(false)}>\n          <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\n            <h3>Create New Chat</h3>\n            <input\n              type=\"text\"\n              value={newChatTitle}\n              onChange={(e) => setNewChatTitle(e.target.value)}\n              placeholder=\"Enter chat title...\"\n              className=\"modal-input\"\n              autoFocus\n              onKeyPress={(e) => e.key === 'Enter' && handleCreateChat()}\n            />\n            <div className=\"modal-buttons\">\n              <button \n                onClick={() => setShowNewChatModal(false)}\n                className=\"modal-btn cancel\"\n              >\n                Cancel\n              </button>\n              <button \n                onClick={handleCreateChat}\n                className=\"modal-btn create\"\n                disabled={!newChatTitle.trim()}\n              >\n                Create\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}