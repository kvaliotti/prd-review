{"ast":null,"code":"var _jsxFileName = \"/Users/konstantinvaliotti/prdreview/frontend/src/components/PRDReviewPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { notionAPI, prdAPI, prdAnalysisAPI } from '../services/api';\nimport { PageType } from '../types';\nimport './PRDReviewPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PRDReviewPage = () => {\n  _s();\n  // State management\n  const [notionPRDs, setNotionPRDs] = useState([]);\n  const [userPRDs, setUserPRDs] = useState([]);\n  const [selectedPRD, setSelectedPRD] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [editorContent, setEditorContent] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [showNewPRDModal, setShowNewPRDModal] = useState(false);\n  const [newPRDTitle, setNewPRDTitle] = useState('');\n\n  // Analysis state\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResults, setAnalysisResults] = useState({});\n  const [analysisLogs, setAnalysisLogs] = useState([]);\n  const [finalReport, setFinalReport] = useState('');\n  const [activeTab, setActiveTab] = useState('results');\n  const [analysisError, setAnalysisError] = useState('');\n\n  // Load PRDs on component mount\n  useEffect(() => {\n    loadAllPRDs();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Load all PRDs (both Notion and user-created)\n  const loadAllPRDs = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([loadNotionPRDs(), loadUserPRDs()]);\n    } catch (error) {\n      console.error('Failed to load PRDs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load PRDs from Notion\n  const loadNotionPRDs = async () => {\n    try {\n      const response = await notionAPI.getPages(PageType.prd, 100, 0);\n      const prdDocs = response.data.map(page => ({\n        id: `notion-${page.id}`,\n        title: page.title,\n        content: page.content || '',\n        created_at: page.created_at,\n        updated_at: page.updated_at,\n        is_local: false,\n        notion_url: page.notion_url,\n        file_type: 'text'\n      }));\n      setNotionPRDs(prdDocs);\n    } catch (error) {\n      console.error('Failed to load Notion PRDs:', error);\n    }\n  };\n\n  // Load user-created PRDs from database\n  const loadUserPRDs = async () => {\n    try {\n      const response = await prdAPI.getPRDs();\n      const prdDocs = response.data.map(prd => ({\n        id: `user-${prd.id}`,\n        title: prd.title,\n        content: prd.content || '',\n        created_at: prd.created_at,\n        updated_at: prd.updated_at,\n        is_local: true,\n        file_type: 'markdown'\n      }));\n      setUserPRDs(prdDocs);\n    } catch (error) {\n      console.error('Failed to load user PRDs:', error);\n    }\n  };\n\n  // Create new PRD in database\n  const createNewPRD = async () => {\n    if (!newPRDTitle.trim()) return;\n    setSaving(true);\n    try {\n      const prdData = {\n        title: newPRDTitle.trim(),\n        content: `# ${newPRDTitle.trim()}\\n\\n## Overview\\n\\nWrite your PRD content here...\\n\\n## Features\\n\\n## User Stories\\n\\n## Success Metrics\\n\\n`\n      };\n      const response = await prdAPI.createPRD(prdData);\n\n      // Convert to PRDDocument format\n      const newPRD = {\n        id: `user-${response.data.id}`,\n        title: response.data.title,\n        content: response.data.content || '',\n        created_at: response.data.created_at,\n        updated_at: response.data.updated_at,\n        is_local: true,\n        file_type: 'markdown'\n      };\n\n      // Add to user PRDs and select it\n      setUserPRDs(prev => [newPRD, ...prev]);\n      setSelectedPRD(newPRD);\n      setEditorContent(newPRD.content || '');\n      setIsEditing(true);\n      setShowNewPRDModal(false);\n      setNewPRDTitle('');\n    } catch (error) {\n      console.error('Failed to create PRD:', error);\n      alert('Failed to create PRD. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Select a PRD document\n  const selectPRD = async prd => {\n    setSelectedPRD(prd);\n    setIsEditing(prd.is_local);\n    if (prd.is_local) {\n      // For user-created PRDs, content is already available\n      setEditorContent(prd.content || '');\n    } else {\n      // Load detailed content for Notion PRDs\n      try {\n        const notionId = parseInt(prd.id.replace('notion-', ''));\n        const response = await notionAPI.getPageDetails(notionId);\n        setEditorContent(response.data.content || '');\n      } catch (error) {\n        console.error('Failed to load PRD details:', error);\n        setEditorContent(prd.content || '');\n      }\n    }\n  };\n\n  // Save PRD changes to database\n  const savePRDChanges = async () => {\n    if (!(selectedPRD !== null && selectedPRD !== void 0 && selectedPRD.is_local)) return;\n    setSaving(true);\n    try {\n      const prdId = parseInt(selectedPRD.id.replace('user-', ''));\n      const updateData = {\n        content: editorContent\n      };\n      const response = await prdAPI.updatePRD(prdId, updateData);\n\n      // Update the PRD in state\n      const updatedPRD = {\n        ...selectedPRD,\n        content: response.data.content || '',\n        updated_at: response.data.updated_at\n      };\n      setSelectedPRD(updatedPRD);\n      setUserPRDs(prev => prev.map(prd => prd.id === selectedPRD.id ? updatedPRD : prd));\n      alert('PRD saved successfully!');\n    } catch (error) {\n      console.error('Failed to save PRD:', error);\n      alert('Failed to save PRD. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Delete a PRD\n  const deletePRD = async prd => {\n    if (!prd.is_local) return;\n    if (!window.confirm(`Are you sure you want to delete \"${prd.title}\"?`)) return;\n    try {\n      const prdId = parseInt(prd.id.replace('user-', ''));\n      await prdAPI.deletePRD(prdId);\n\n      // Remove from state\n      setUserPRDs(prev => prev.filter(p => p.id !== prd.id));\n\n      // Clear selection if this PRD was selected\n      if ((selectedPRD === null || selectedPRD === void 0 ? void 0 : selectedPRD.id) === prd.id) {\n        setSelectedPRD(null);\n        setEditorContent('');\n        setIsEditing(false);\n      }\n      alert('PRD deleted successfully!');\n    } catch (error) {\n      console.error('Failed to delete PRD:', error);\n      alert('Failed to delete PRD. Please try again.');\n    }\n  };\n\n  // Parse final report into individual sections\n  const parseFinalReport = reportContent => {\n    const sections = {};\n\n    // Split by section headers (## Section Name)\n    const sectionRegex = /## (.+?) \\(Score: (\\d+)\\/5\\)\\n([\\s\\S]*?)(?=\\n## |$)/g;\n    let match;\n    while ((match = sectionRegex.exec(reportContent)) !== null) {\n      const [, sectionName, score, content] = match;\n\n      // Extract analysis (between ### Analysis and ### Recommendations)\n      const analysisMatch = content.match(/### Analysis\\n([\\s\\S]*?)(?=\\n### |$)/);\n      const analysis = analysisMatch ? analysisMatch[1].trim() : '';\n\n      // Extract recommendations (bulleted list after ### Recommendations)\n      const recommendationsMatch = content.match(/### Recommendations\\n((?:- .+\\n?)*)/);\n      const recommendations = recommendationsMatch ? recommendationsMatch[1].split('\\n').filter(line => line.startsWith('- ')).map(line => line.substring(2).trim()) : [];\n      sections[sectionName] = {\n        section_name: sectionName,\n        analysis,\n        recommendations,\n        score: parseInt(score)\n      };\n    }\n    return sections;\n  };\n\n  // Start PRD analysis\n  const startAnalysis = () => {\n    if (!selectedPRD) return;\n    setIsAnalyzing(true);\n    setAnalysisResults({});\n    setAnalysisLogs([]);\n    setFinalReport('');\n    setAnalysisError('');\n    setActiveTab('results');\n    const prdId = selectedPRD.id; // ID already contains the proper prefix (user-X or notion-X)\n\n    const eventSource = prdAnalysisAPI.analyzePRD(prdId, event => {\n      switch (event.type) {\n        case 'final_report':\n          if (event.content) {\n            setFinalReport(event.content);\n            // Parse final report into sections\n            const parsedSections = parseFinalReport(event.content);\n            setAnalysisResults(parsedSections);\n          }\n          break;\n        case 'log':\n        case 'status':\n          if (event.message) {\n            setAnalysisLogs(prev => [...prev, event.message]);\n            // Check if analysis is complete\n            if (event.message.includes('Analysis completed successfully')) {\n              setIsAnalyzing(false);\n              if (eventSource) {\n                eventSource.close();\n              }\n            }\n          }\n          break;\n        case 'error':\n          if (event.message) {\n            setAnalysisError(event.message);\n            setIsAnalyzing(false);\n          }\n          break;\n        default:\n          if (event.message) {\n            setAnalysisLogs(prev => [...prev, event.message]);\n          }\n      }\n\n      // Check if analysis is complete\n      if (event.type === 'final_report') {\n        setIsAnalyzing(false);\n      }\n    }, error => {\n      setAnalysisError(error);\n      setIsAnalyzing(false);\n    });\n\n    // Cleanup function\n    return () => {\n      if (eventSource) {\n        eventSource.close();\n      }\n    };\n  };\n\n  // Get all PRDs sorted by update time\n  const allPRDs = [...userPRDs, ...notionPRDs].sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prd-review-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prd-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"PRD Documents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-prd-btn\",\n          onClick: () => setShowNewPRDModal(true),\n          disabled: saving,\n          children: \"+ New PRD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prd-list\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: \"Loading PRDs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 23\n        }, this), allPRDs.map(prd => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `prd-item ${(selectedPRD === null || selectedPRD === void 0 ? void 0 : selectedPRD.id) === prd.id ? 'selected' : ''}`,\n          onClick: () => selectPRD(prd),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prd-item-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: prd.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"prd-badges\",\n              children: [prd.is_local && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"badge local\",\n                children: \"Local\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 36\n              }, this), !prd.is_local && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"badge notion\",\n                children: \"Notion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prd-item-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"date\",\n              children: new Date(prd.updated_at).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this), prd.is_local && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-btn\",\n              onClick: e => {\n                e.stopPropagation();\n                deletePRD(prd);\n              },\n              title: \"Delete PRD\",\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this)]\n        }, prd.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)), allPRDs.length === 0 && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No PRDs found.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Create a new PRD or import from Notion.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prd-editor\",\n      children: selectedPRD ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedPRD.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"editor-actions\",\n            children: [selectedPRD.is_local && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"save-btn\",\n                onClick: savePRDChanges,\n                disabled: !isEditing || saving,\n                children: saving ? 'Saving...' : 'Save'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-btn\",\n                onClick: () => setIsEditing(!isEditing),\n                disabled: saving,\n                children: isEditing ? 'Preview' : 'Edit'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), selectedPRD.notion_url && /*#__PURE__*/_jsxDEV(\"a\", {\n              href: selectedPRD.notion_url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"notion-link\",\n              children: \"Open in Notion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-content\",\n          children: isEditing && selectedPRD.is_local ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"markdown-editor\",\n            value: editorContent,\n            onChange: e => setEditorContent(e.target.value),\n            placeholder: \"Write your PRD content in Markdown...\",\n            disabled: saving\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"markdown-preview\",\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: editorContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a PRD to view or edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose a PRD from the sidebar or create a new one to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prd-analysis\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"PRD Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"analyze-btn\",\n          onClick: startAnalysis,\n          disabled: !selectedPRD || isAnalyzing,\n          children: isAnalyzing ? 'Analyzing...' : 'Run Analysis'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), analysisError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: analysisError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this), (Object.keys(analysisResults).length > 0 || analysisLogs.length > 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-tabs\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-btn ${activeTab === 'results' ? 'active' : ''}`,\n            onClick: () => setActiveTab('results'),\n            children: \"Analysis Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-btn ${activeTab === 'logs' ? 'active' : ''}`,\n            onClick: () => setActiveTab('logs'),\n            children: \"Graph Logs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), activeTab === 'results' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-results\",\n          children: [Object.keys(analysisResults).length === 0 && !finalReport && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-analysis\",\n            children: isAnalyzing ? 'Analysis in progress...' : 'No analysis results yet.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 19\n          }, this), Object.entries(analysisResults).map(([sectionName, section]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: sectionName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `score-badge score-${section.score}`,\n                children: [\"Score: \", section.score, \"/5\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"analysis-text\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Analysis\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"markdown-content\",\n                  children: section.analysis.split('\\n').map((paragraph, index) => paragraph.trim() && /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: paragraph\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 495,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"recommendations-text\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Recommendations\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 502,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"recommendations-list\",\n                  children: section.recommendations.map((rec, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: rec\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 505,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 503,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 21\n            }, this)]\n          }, sectionName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 19\n          }, this)), finalReport && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"final-report\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Final Report\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"markdown-content\",\n              children: finalReport.split('\\n').map((line, index) => {\n                if (line.startsWith('# ')) {\n                  return /*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: line.substring(2)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 519,\n                    columnNumber: 34\n                  }, this);\n                } else if (line.startsWith('## ')) {\n                  return /*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: line.substring(3)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 521,\n                    columnNumber: 34\n                  }, this);\n                } else if (line.startsWith('### ')) {\n                  return /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: line.substring(4)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 523,\n                    columnNumber: 34\n                  }, this);\n                } else if (line.startsWith('**') && line.endsWith('**')) {\n                  return /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: line.slice(2, -2)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 525,\n                      columnNumber: 49\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 525,\n                    columnNumber: 34\n                  }, this);\n                } else if (line.startsWith('- ')) {\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: line.substring(2)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 34\n                  }, this);\n                } else if (line.trim()) {\n                  return /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: line\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 529,\n                    columnNumber: 34\n                  }, this);\n                }\n                return /*#__PURE__*/_jsxDEV(\"br\", {}, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 531,\n                  columnNumber: 32\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 15\n        }, this), activeTab === 'logs' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-logs\",\n          children: analysisLogs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-analysis\",\n            children: \"No logs yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 19\n          }, this) : analysisLogs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"log-entry\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-timestamp\",\n              children: new Date().toLocaleTimeString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-message\",\n              children: log\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this), !isAnalyzing && Object.keys(analysisResults).length === 0 && !finalReport && !analysisError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-analysis\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a PRD and click \\\"Run Analysis\\\" to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 15\n    }, this), showNewPRDModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Create New PRD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-btn\",\n            onClick: () => setShowNewPRDModal(false),\n            disabled: saving,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"prd-title-input\",\n            placeholder: \"Enter PRD title...\",\n            value: newPRDTitle,\n            onChange: e => setNewPRDTitle(e.target.value),\n            onKeyPress: e => e.key === 'Enter' && !saving && createNewPRD(),\n            autoFocus: true,\n            disabled: saving\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-btn\",\n            onClick: () => setShowNewPRDModal(false),\n            disabled: saving,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-btn\",\n            onClick: createNewPRD,\n            disabled: !newPRDTitle.trim() || saving,\n            children: saving ? 'Creating...' : 'Create PRD'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n};\n_s(PRDReviewPage, \"P/4y2Hunun46fGk1HFVkvzMqA5I=\");\n_c = PRDReviewPage;\nexport default PRDReviewPage;\nvar _c;\n$RefreshReg$(_c, \"PRDReviewPage\");","map":{"version":3,"names":["React","useState","useEffect","notionAPI","prdAPI","prdAnalysisAPI","PageType","jsxDEV","_jsxDEV","Fragment","_Fragment","PRDReviewPage","_s","notionPRDs","setNotionPRDs","userPRDs","setUserPRDs","selectedPRD","setSelectedPRD","loading","setLoading","saving","setSaving","editorContent","setEditorContent","isEditing","setIsEditing","showNewPRDModal","setShowNewPRDModal","newPRDTitle","setNewPRDTitle","isAnalyzing","setIsAnalyzing","analysisResults","setAnalysisResults","analysisLogs","setAnalysisLogs","finalReport","setFinalReport","activeTab","setActiveTab","analysisError","setAnalysisError","loadAllPRDs","Promise","all","loadNotionPRDs","loadUserPRDs","error","console","response","getPages","prd","prdDocs","data","map","page","id","title","content","created_at","updated_at","is_local","notion_url","file_type","getPRDs","createNewPRD","trim","prdData","createPRD","newPRD","prev","alert","selectPRD","notionId","parseInt","replace","getPageDetails","savePRDChanges","prdId","updateData","updatePRD","updatedPRD","deletePRD","window","confirm","filter","p","parseFinalReport","reportContent","sections","sectionRegex","match","exec","sectionName","score","analysisMatch","analysis","recommendationsMatch","recommendations","split","line","startsWith","substring","section_name","startAnalysis","eventSource","analyzePRD","event","type","parsedSections","message","includes","close","allPRDs","sort","a","b","Date","getTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toLocaleDateString","e","stopPropagation","length","href","target","rel","value","onChange","placeholder","Object","keys","entries","section","paragraph","index","rec","endsWith","slice","log","toLocaleTimeString","onKeyPress","key","autoFocus","_c","$RefreshReg$"],"sources":["/Users/konstantinvaliotti/prdreview/frontend/src/components/PRDReviewPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { notionAPI, prdAPI, prdAnalysisAPI, PRDCreate, PRDUpdate, PRDResponse, AnalysisSection, AnalysisEvent } from '../services/api';\nimport { NotionPage, PRDDocument, PageType } from '../types';\nimport './PRDReviewPage.css';\n\nconst PRDReviewPage: React.FC = () => {\n  // State management\n  const [notionPRDs, setNotionPRDs] = useState<PRDDocument[]>([]);\n  const [userPRDs, setUserPRDs] = useState<PRDDocument[]>([]);\n  const [selectedPRD, setSelectedPRD] = useState<PRDDocument | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [editorContent, setEditorContent] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [showNewPRDModal, setShowNewPRDModal] = useState(false);\n  const [newPRDTitle, setNewPRDTitle] = useState('');\n  \n  // Analysis state\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResults, setAnalysisResults] = useState<Record<string, AnalysisSection>>({});\n  const [analysisLogs, setAnalysisLogs] = useState<string[]>([]);\n  const [finalReport, setFinalReport] = useState<string>('');\n  const [activeTab, setActiveTab] = useState<'results' | 'logs'>('results');\n  const [analysisError, setAnalysisError] = useState<string>('');\n\n  // Load PRDs on component mount\n  useEffect(() => {\n    loadAllPRDs();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Load all PRDs (both Notion and user-created)\n  const loadAllPRDs = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([loadNotionPRDs(), loadUserPRDs()]);\n    } catch (error) {\n      console.error('Failed to load PRDs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load PRDs from Notion\n  const loadNotionPRDs = async () => {\n    try {\n      const response = await notionAPI.getPages(PageType.prd, 100, 0);\n      const prdDocs: PRDDocument[] = response.data.map((page: NotionPage) => ({\n        id: `notion-${page.id}`,\n        title: page.title,\n        content: page.content || '',\n        created_at: page.created_at,\n        updated_at: page.updated_at,\n        is_local: false,\n        notion_url: page.notion_url,\n        file_type: 'text' as const,\n      }));\n      setNotionPRDs(prdDocs);\n    } catch (error) {\n      console.error('Failed to load Notion PRDs:', error);\n    }\n  };\n\n  // Load user-created PRDs from database\n  const loadUserPRDs = async () => {\n    try {\n      const response = await prdAPI.getPRDs();\n      const prdDocs: PRDDocument[] = response.data.map((prd: PRDResponse) => ({\n        id: `user-${prd.id}`,\n        title: prd.title,\n        content: prd.content || '',\n        created_at: prd.created_at,\n        updated_at: prd.updated_at,\n        is_local: true,\n        file_type: 'markdown' as const,\n      }));\n      setUserPRDs(prdDocs);\n    } catch (error) {\n      console.error('Failed to load user PRDs:', error);\n    }\n  };\n\n  // Create new PRD in database\n  const createNewPRD = async () => {\n    if (!newPRDTitle.trim()) return;\n\n    setSaving(true);\n    try {\n      const prdData: PRDCreate = {\n        title: newPRDTitle.trim(),\n        content: `# ${newPRDTitle.trim()}\\n\\n## Overview\\n\\nWrite your PRD content here...\\n\\n## Features\\n\\n## User Stories\\n\\n## Success Metrics\\n\\n`,\n      };\n\n      const response = await prdAPI.createPRD(prdData);\n      \n      // Convert to PRDDocument format\n      const newPRD: PRDDocument = {\n        id: `user-${response.data.id}`,\n        title: response.data.title,\n        content: response.data.content || '',\n        created_at: response.data.created_at,\n        updated_at: response.data.updated_at,\n        is_local: true,\n        file_type: 'markdown',\n      };\n\n      // Add to user PRDs and select it\n      setUserPRDs(prev => [newPRD, ...prev]);\n      setSelectedPRD(newPRD);\n      setEditorContent(newPRD.content || '');\n      setIsEditing(true);\n      setShowNewPRDModal(false);\n      setNewPRDTitle('');\n    } catch (error) {\n      console.error('Failed to create PRD:', error);\n      alert('Failed to create PRD. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Select a PRD document\n  const selectPRD = async (prd: PRDDocument) => {\n    setSelectedPRD(prd);\n    setIsEditing(prd.is_local);\n\n    if (prd.is_local) {\n      // For user-created PRDs, content is already available\n      setEditorContent(prd.content || '');\n    } else {\n      // Load detailed content for Notion PRDs\n      try {\n        const notionId = parseInt(prd.id.replace('notion-', ''));\n        const response = await notionAPI.getPageDetails(notionId);\n        setEditorContent(response.data.content || '');\n      } catch (error) {\n        console.error('Failed to load PRD details:', error);\n        setEditorContent(prd.content || '');\n      }\n    }\n  };\n\n  // Save PRD changes to database\n  const savePRDChanges = async () => {\n    if (!selectedPRD?.is_local) return;\n\n    setSaving(true);\n    try {\n      const prdId = parseInt(selectedPRD.id.replace('user-', ''));\n      const updateData: PRDUpdate = {\n        content: editorContent,\n      };\n\n      const response = await prdAPI.updatePRD(prdId, updateData);\n      \n      // Update the PRD in state\n      const updatedPRD: PRDDocument = {\n        ...selectedPRD,\n        content: response.data.content || '',\n        updated_at: response.data.updated_at,\n      };\n\n      setSelectedPRD(updatedPRD);\n      setUserPRDs(prev => \n        prev.map(prd => \n          prd.id === selectedPRD.id ? updatedPRD : prd\n        )\n      );\n\n      alert('PRD saved successfully!');\n    } catch (error) {\n      console.error('Failed to save PRD:', error);\n      alert('Failed to save PRD. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Delete a PRD\n  const deletePRD = async (prd: PRDDocument) => {\n    if (!prd.is_local) return;\n    \n    if (!window.confirm(`Are you sure you want to delete \"${prd.title}\"?`)) return;\n\n    try {\n      const prdId = parseInt(prd.id.replace('user-', ''));\n      await prdAPI.deletePRD(prdId);\n      \n      // Remove from state\n      setUserPRDs(prev => prev.filter(p => p.id !== prd.id));\n      \n      // Clear selection if this PRD was selected\n      if (selectedPRD?.id === prd.id) {\n        setSelectedPRD(null);\n        setEditorContent('');\n        setIsEditing(false);\n      }\n      \n      alert('PRD deleted successfully!');\n    } catch (error) {\n      console.error('Failed to delete PRD:', error);\n      alert('Failed to delete PRD. Please try again.');\n    }\n  };\n\n  // Parse final report into individual sections\n  const parseFinalReport = (reportContent: string) => {\n    const sections: { [key: string]: AnalysisSection } = {};\n    \n    // Split by section headers (## Section Name)\n    const sectionRegex = /## (.+?) \\(Score: (\\d+)\\/5\\)\\n([\\s\\S]*?)(?=\\n## |$)/g;\n    let match;\n    \n    while ((match = sectionRegex.exec(reportContent)) !== null) {\n      const [, sectionName, score, content] = match;\n      \n      // Extract analysis (between ### Analysis and ### Recommendations)\n      const analysisMatch = content.match(/### Analysis\\n([\\s\\S]*?)(?=\\n### |$)/);\n      const analysis = analysisMatch ? analysisMatch[1].trim() : '';\n      \n      // Extract recommendations (bulleted list after ### Recommendations)\n      const recommendationsMatch = content.match(/### Recommendations\\n((?:- .+\\n?)*)/);\n      const recommendations = recommendationsMatch \n        ? recommendationsMatch[1].split('\\n').filter(line => line.startsWith('- ')).map(line => line.substring(2).trim())\n        : [];\n      \n      sections[sectionName] = {\n        section_name: sectionName,\n        analysis,\n        recommendations,\n        score: parseInt(score)\n      };\n    }\n    \n    return sections;\n  };\n\n  // Start PRD analysis\n  const startAnalysis = () => {\n    if (!selectedPRD) return;\n\n    setIsAnalyzing(true);\n    setAnalysisResults({});\n    setAnalysisLogs([]);\n    setFinalReport('');\n    setAnalysisError('');\n    setActiveTab('results');\n\n    const prdId = selectedPRD.id; // ID already contains the proper prefix (user-X or notion-X)\n    \n    const eventSource = prdAnalysisAPI.analyzePRD(\n      prdId,\n      (event: AnalysisEvent) => {\n        switch (event.type) {\n          case 'final_report':\n            if (event.content) {\n              setFinalReport(event.content);\n              // Parse final report into sections\n              const parsedSections = parseFinalReport(event.content);\n              setAnalysisResults(parsedSections);\n            }\n            break;\n            \n          case 'log':\n          case 'status':\n            if (event.message) {\n              setAnalysisLogs(prev => [...prev, event.message!]);\n              // Check if analysis is complete\n              if (event.message.includes('Analysis completed successfully')) {\n                setIsAnalyzing(false);\n                if (eventSource) {\n                  eventSource.close();\n                }\n              }\n            }\n            break;\n            \n          case 'error':\n            if (event.message) {\n              setAnalysisError(event.message);\n              setIsAnalyzing(false);\n            }\n            break;\n            \n          default:\n            if (event.message) {\n              setAnalysisLogs(prev => [...prev, event.message!]);\n            }\n        }\n        \n        // Check if analysis is complete\n        if (event.type === 'final_report') {\n          setIsAnalyzing(false);\n        }\n      },\n      (error: string) => {\n        setAnalysisError(error);\n        setIsAnalyzing(false);\n      }\n    );\n\n    // Cleanup function\n    return () => {\n      if (eventSource) {\n        eventSource.close();\n      }\n    };\n  };\n\n  // Get all PRDs sorted by update time\n  const allPRDs = [...userPRDs, ...notionPRDs].sort(\n    (a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n  );\n\n  return (\n    <div className=\"prd-review-page\">\n      {/* Left Sidebar - PRD List */}\n      <div className=\"prd-sidebar\">\n        <div className=\"sidebar-header\">\n          <h3>PRD Documents</h3>\n          <button \n            className=\"new-prd-btn\"\n            onClick={() => setShowNewPRDModal(true)}\n            disabled={saving}\n          >\n            + New PRD\n          </button>\n        </div>\n\n        <div className=\"prd-list\">\n          {loading && <div className=\"loading\">Loading PRDs...</div>}\n          \n          {allPRDs.map((prd) => (\n            <div\n              key={prd.id}\n              className={`prd-item ${selectedPRD?.id === prd.id ? 'selected' : ''}`}\n              onClick={() => selectPRD(prd)}\n            >\n              <div className=\"prd-item-header\">\n                <h4>{prd.title}</h4>\n                <div className=\"prd-badges\">\n                  {prd.is_local && <span className=\"badge local\">Local</span>}\n                  {!prd.is_local && <span className=\"badge notion\">Notion</span>}\n                </div>\n              </div>\n              <div className=\"prd-item-meta\">\n                <span className=\"date\">\n                  {new Date(prd.updated_at).toLocaleDateString()}\n                </span>\n                {prd.is_local && (\n                  <button\n                    className=\"delete-btn\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      deletePRD(prd);\n                    }}\n                    title=\"Delete PRD\"\n                  >\n                    🗑️\n                  </button>\n                )}\n              </div>\n            </div>\n          ))}\n\n          {allPRDs.length === 0 && !loading && (\n            <div className=\"empty-state\">\n              <p>No PRDs found.</p>\n              <p>Create a new PRD or import from Notion.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Central Editor Area */}\n      <div className=\"prd-editor\">\n        {selectedPRD ? (\n          <>\n            <div className=\"editor-header\">\n              <h2>{selectedPRD.title}</h2>\n              <div className=\"editor-actions\">\n                {selectedPRD.is_local && (\n                  <>\n                    <button\n                      className=\"save-btn\"\n                      onClick={savePRDChanges}\n                      disabled={!isEditing || saving}\n                    >\n                      {saving ? 'Saving...' : 'Save'}\n                    </button>\n                    <button\n                      className=\"edit-btn\"\n                      onClick={() => setIsEditing(!isEditing)}\n                      disabled={saving}\n                    >\n                      {isEditing ? 'Preview' : 'Edit'}\n                    </button>\n                  </>\n                )}\n                {selectedPRD.notion_url && (\n                  <a\n                    href={selectedPRD.notion_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"notion-link\"\n                  >\n                    Open in Notion\n                  </a>\n                )}\n              </div>\n            </div>\n\n            <div className=\"editor-content\">\n              {isEditing && selectedPRD.is_local ? (\n                <textarea\n                  className=\"markdown-editor\"\n                  value={editorContent}\n                  onChange={(e) => setEditorContent(e.target.value)}\n                  placeholder=\"Write your PRD content in Markdown...\"\n                  disabled={saving}\n                />\n              ) : (\n                <div className=\"markdown-preview\">\n                  <pre>{editorContent}</pre>\n                </div>\n              )}\n            </div>\n          </>\n        ) : (\n          <div className=\"no-selection\">\n            <h3>Select a PRD to view or edit</h3>\n            <p>Choose a PRD from the sidebar or create a new one to get started.</p>\n          </div>\n        )}\n      </div>\n\n      {/* Right Sidebar - Analysis */}\n              <div className=\"prd-analysis\">\n        <div className=\"analysis-header\">\n          <h3>PRD Analysis</h3>\n          <button \n            className=\"analyze-btn\"\n            onClick={startAnalysis}\n            disabled={!selectedPRD || isAnalyzing}\n          >\n            {isAnalyzing ? 'Analyzing...' : 'Run Analysis'}\n          </button>\n        </div>\n\n        {analysisError && (\n          <div className=\"error-message\">\n            <p>{analysisError}</p>\n          </div>\n        )}\n\n        {(Object.keys(analysisResults).length > 0 || analysisLogs.length > 0) && (\n          <div className=\"analysis-content\">\n            <div className=\"analysis-tabs\">\n              <button \n                className={`tab-btn ${activeTab === 'results' ? 'active' : ''}`}\n                onClick={() => setActiveTab('results')}\n              >\n                Analysis Results\n              </button>\n              <button \n                className={`tab-btn ${activeTab === 'logs' ? 'active' : ''}`}\n                onClick={() => setActiveTab('logs')}\n              >\n                Graph Logs\n              </button>\n            </div>\n\n            {activeTab === 'results' && (\n              <div className=\"analysis-results\">\n                {Object.keys(analysisResults).length === 0 && !finalReport && (\n                  <div className=\"no-analysis\">\n                    {isAnalyzing ? 'Analysis in progress...' : 'No analysis results yet.'}\n                  </div>\n                )}\n                \n                {Object.entries(analysisResults).map(([sectionName, section]) => (\n                  <div key={sectionName} className=\"analysis-section\">\n                    <div className=\"section-header\">\n                      <h4>{sectionName}</h4>\n                      <span className={`score-badge score-${section.score}`}>\n                        Score: {section.score}/5\n                      </span>\n                    </div>\n                    \n                    <div className=\"section-content\">\n                      <div className=\"analysis-text\">\n                        <h5>Analysis</h5>\n                        <div className=\"markdown-content\">\n                          {section.analysis.split('\\n').map((paragraph, index) => (\n                            paragraph.trim() && (\n                              <p key={index}>{paragraph}</p>\n                            )\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div className=\"recommendations-text\">\n                        <h5>Recommendations</h5>\n                        <ul className=\"recommendations-list\">\n                          {section.recommendations.map((rec, index) => (\n                            <li key={index}>{rec}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                \n                {finalReport && (\n                  <div className=\"final-report\">\n                    <h4>Final Report</h4>\n                    <div className=\"markdown-content\">\n                      {finalReport.split('\\n').map((line, index) => {\n                        if (line.startsWith('# ')) {\n                          return <h1 key={index}>{line.substring(2)}</h1>;\n                        } else if (line.startsWith('## ')) {\n                          return <h2 key={index}>{line.substring(3)}</h2>;\n                        } else if (line.startsWith('### ')) {\n                          return <h3 key={index}>{line.substring(4)}</h3>;\n                        } else if (line.startsWith('**') && line.endsWith('**')) {\n                          return <p key={index}><strong>{line.slice(2, -2)}</strong></p>;\n                        } else if (line.startsWith('- ')) {\n                          return <li key={index}>{line.substring(2)}</li>;\n                        } else if (line.trim()) {\n                          return <p key={index}>{line}</p>;\n                        }\n                        return <br key={index} />;\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {activeTab === 'logs' && (\n              <div className=\"analysis-logs\">\n                {analysisLogs.length === 0 ? (\n                  <div className=\"no-analysis\">No logs yet.</div>\n                ) : (\n                  analysisLogs.map((log, index) => (\n                    <div key={index} className=\"log-entry\">\n                      <span className=\"log-timestamp\">\n                        {new Date().toLocaleTimeString()}\n                      </span>\n                      <span className=\"log-message\">{log}</span>\n                    </div>\n                  ))\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {!isAnalyzing && Object.keys(analysisResults).length === 0 && !finalReport && !analysisError && (\n          <div className=\"no-analysis\">\n            <p>Select a PRD and click \"Run Analysis\" to get started.</p>\n          </div>\n        )}\n      </div>\n\n      {/* New PRD Modal */}\n      {showNewPRDModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <div className=\"modal-header\">\n              <h3>Create New PRD</h3>\n              <button\n                className=\"close-btn\"\n                onClick={() => setShowNewPRDModal(false)}\n                disabled={saving}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"modal-content\">\n              <input\n                type=\"text\"\n                className=\"prd-title-input\"\n                placeholder=\"Enter PRD title...\"\n                value={newPRDTitle}\n                onChange={(e) => setNewPRDTitle(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && !saving && createNewPRD()}\n                autoFocus\n                disabled={saving}\n              />\n            </div>\n            <div className=\"modal-actions\">\n              <button\n                className=\"cancel-btn\"\n                onClick={() => setShowNewPRDModal(false)}\n                disabled={saving}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"create-btn\"\n                onClick={createNewPRD}\n                disabled={!newPRDTitle.trim() || saving}\n              >\n                {saving ? 'Creating...' : 'Create PRD'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PRDReviewPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}