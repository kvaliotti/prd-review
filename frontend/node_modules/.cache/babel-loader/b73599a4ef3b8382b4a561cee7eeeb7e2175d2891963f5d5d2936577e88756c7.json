{"ast":null,"code":"import React,{useState,useEffect}from'react';import{notionAPI,prdAPI,prdAnalysisAPI}from'../services/api';import{PageType}from'../types';import'./PRDReviewPage.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const PRDReviewPage=()=>{// State management\nconst[notionPRDs,setNotionPRDs]=useState([]);const[userPRDs,setUserPRDs]=useState([]);const[selectedPRD,setSelectedPRD]=useState(null);const[loading,setLoading]=useState(false);const[saving,setSaving]=useState(false);const[editorContent,setEditorContent]=useState('');const[isEditing,setIsEditing]=useState(false);const[showNewPRDModal,setShowNewPRDModal]=useState(false);const[newPRDTitle,setNewPRDTitle]=useState('');// Analysis state\nconst[isAnalyzing,setIsAnalyzing]=useState(false);const[analysisResults,setAnalysisResults]=useState({});const[analysisLogs,setAnalysisLogs]=useState([]);const[finalReport,setFinalReport]=useState('');const[activeTab,setActiveTab]=useState('analysis');const[analysisError,setAnalysisError]=useState('');// Load PRDs on component mount\nuseEffect(()=>{loadAllPRDs();},[]);// eslint-disable-line react-hooks/exhaustive-deps\n// Load all PRDs (both Notion and user-created)\nconst loadAllPRDs=async()=>{setLoading(true);try{await Promise.all([loadNotionPRDs(),loadUserPRDs()]);}catch(error){console.error('Failed to load PRDs:',error);}finally{setLoading(false);}};// Load PRDs from Notion\nconst loadNotionPRDs=async()=>{try{const response=await notionAPI.getPages(PageType.prd,100,0);const prdDocs=response.data.map(page=>({id:`notion-${page.id}`,title:page.title,content:page.content||'',created_at:page.created_at,updated_at:page.updated_at,is_local:false,notion_url:page.notion_url,file_type:'text'}));setNotionPRDs(prdDocs);}catch(error){console.error('Failed to load Notion PRDs:',error);}};// Load user-created PRDs from database\nconst loadUserPRDs=async()=>{try{const response=await prdAPI.getPRDs();const prdDocs=response.data.map(prd=>({id:`user-${prd.id}`,title:prd.title,content:prd.content||'',created_at:prd.created_at,updated_at:prd.updated_at,is_local:true,file_type:'markdown'}));setUserPRDs(prdDocs);}catch(error){console.error('Failed to load user PRDs:',error);}};// Create new PRD in database\nconst createNewPRD=async()=>{if(!newPRDTitle.trim())return;setSaving(true);try{const prdData={title:newPRDTitle.trim(),content:`# ${newPRDTitle.trim()}\\n\\n## Overview\\n\\nWrite your PRD content here...\\n\\n## Features\\n\\n## User Stories\\n\\n## Success Metrics\\n\\n`};const response=await prdAPI.createPRD(prdData);// Convert to PRDDocument format\nconst newPRD={id:`user-${response.data.id}`,title:response.data.title,content:response.data.content||'',created_at:response.data.created_at,updated_at:response.data.updated_at,is_local:true,file_type:'markdown'};// Add to user PRDs and select it\nsetUserPRDs(prev=>[newPRD,...prev]);setSelectedPRD(newPRD);setEditorContent(newPRD.content||'');setIsEditing(true);setShowNewPRDModal(false);setNewPRDTitle('');}catch(error){console.error('Failed to create PRD:',error);alert('Failed to create PRD. Please try again.');}finally{setSaving(false);}};// Select a PRD document\nconst selectPRD=async prd=>{setSelectedPRD(prd);setIsEditing(prd.is_local);if(prd.is_local){// For user-created PRDs, content is already available\nsetEditorContent(prd.content||'');}else{// Load detailed content for Notion PRDs\ntry{const notionId=parseInt(prd.id.replace('notion-',''));const response=await notionAPI.getPageDetails(notionId);setEditorContent(response.data.content||'');}catch(error){console.error('Failed to load PRD details:',error);setEditorContent(prd.content||'');}}};// Save PRD changes to database\nconst savePRDChanges=async()=>{if(!(selectedPRD!==null&&selectedPRD!==void 0&&selectedPRD.is_local))return;setSaving(true);try{const prdId=parseInt(selectedPRD.id.replace('user-',''));const updateData={content:editorContent};const response=await prdAPI.updatePRD(prdId,updateData);// Update the PRD in state\nconst updatedPRD={...selectedPRD,content:response.data.content||'',updated_at:response.data.updated_at};setSelectedPRD(updatedPRD);setUserPRDs(prev=>prev.map(prd=>prd.id===selectedPRD.id?updatedPRD:prd));alert('PRD saved successfully!');}catch(error){console.error('Failed to save PRD:',error);alert('Failed to save PRD. Please try again.');}finally{setSaving(false);}};// Delete a PRD\nconst deletePRD=async prd=>{if(!prd.is_local)return;if(!window.confirm(`Are you sure you want to delete \"${prd.title}\"?`))return;try{const prdId=parseInt(prd.id.replace('user-',''));await prdAPI.deletePRD(prdId);// Remove from state\nsetUserPRDs(prev=>prev.filter(p=>p.id!==prd.id));// Clear selection if this PRD was selected\nif((selectedPRD===null||selectedPRD===void 0?void 0:selectedPRD.id)===prd.id){setSelectedPRD(null);setEditorContent('');setIsEditing(false);}alert('PRD deleted successfully!');}catch(error){console.error('Failed to delete PRD:',error);alert('Failed to delete PRD. Please try again.');}};// Start PRD analysis\nconst startAnalysis=()=>{if(!selectedPRD){alert('Please select a PRD to analyze');return;}// Use the full PRD ID (includes 'user-' or 'notion-' prefix)\nconst prdId=selectedPRD.id;setIsAnalyzing(true);setAnalysisResults({});setAnalysisLogs([]);setFinalReport('');setAnalysisError('');const eventSource=prdAnalysisAPI.analyzePRD(prdId,event=>{switch(event.type){case'status':case'action':if(event.message){setAnalysisLogs(prev=>[...prev,event.message]);}break;case'section_complete':if(event.section){setAnalysisResults(prev=>({...prev,[event.section.name]:event.section}));setAnalysisLogs(prev=>[...prev,`✅ Completed ${event.section.name} analysis (Score: ${event.section.score}/5)`]);}break;case'final_report':if(event.report){setFinalReport(event.report);setAnalysisLogs(prev=>[...prev,'📊 Final report compiled']);}break;case'complete':setIsAnalyzing(false);setAnalysisLogs(prev=>[...prev,'🎉 Analysis complete!']);break;case'error':setIsAnalyzing(false);setAnalysisError(event.message||'Unknown error occurred');setAnalysisLogs(prev=>[...prev,`❌ Error: ${event.message}`]);break;}},error=>{setIsAnalyzing(false);setAnalysisError(error);setAnalysisLogs(prev=>[...prev,`❌ Connection error: ${error}`]);});// Cleanup function\nreturn()=>{if(eventSource){eventSource.close();}};};// Get all PRDs sorted by update time\nconst allPRDs=[...userPRDs,...notionPRDs].sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime());return/*#__PURE__*/_jsxs(\"div\",{className:\"prd-review-page\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"prd-sidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"PRD Documents\"}),/*#__PURE__*/_jsx(\"button\",{className:\"new-prd-btn\",onClick:()=>setShowNewPRDModal(true),disabled:saving,children:\"+ New PRD\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"prd-list\",children:[loading&&/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading PRDs...\"}),allPRDs.map(prd=>/*#__PURE__*/_jsxs(\"div\",{className:`prd-item ${(selectedPRD===null||selectedPRD===void 0?void 0:selectedPRD.id)===prd.id?'selected':''}`,onClick:()=>selectPRD(prd),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"prd-item-header\",children:[/*#__PURE__*/_jsx(\"h4\",{children:prd.title}),/*#__PURE__*/_jsxs(\"div\",{className:\"prd-badges\",children:[prd.is_local&&/*#__PURE__*/_jsx(\"span\",{className:\"badge local\",children:\"Local\"}),!prd.is_local&&/*#__PURE__*/_jsx(\"span\",{className:\"badge notion\",children:\"Notion\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"prd-item-meta\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"date\",children:new Date(prd.updated_at).toLocaleDateString()}),prd.is_local&&/*#__PURE__*/_jsx(\"button\",{className:\"delete-btn\",onClick:e=>{e.stopPropagation();deletePRD(prd);},title:\"Delete PRD\",children:\"\\uD83D\\uDDD1\\uFE0F\"})]})]},prd.id)),allPRDs.length===0&&!loading&&/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"No PRDs found.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Create a new PRD or import from Notion.\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"prd-editor\",children:selectedPRD?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"editor-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:selectedPRD.title}),/*#__PURE__*/_jsxs(\"div\",{className:\"editor-actions\",children:[selectedPRD.is_local&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{className:\"save-btn\",onClick:savePRDChanges,disabled:!isEditing||saving,children:saving?'Saving...':'Save'}),/*#__PURE__*/_jsx(\"button\",{className:\"edit-btn\",onClick:()=>setIsEditing(!isEditing),disabled:saving,children:isEditing?'Preview':'Edit'})]}),selectedPRD.notion_url&&/*#__PURE__*/_jsx(\"a\",{href:selectedPRD.notion_url,target:\"_blank\",rel:\"noopener noreferrer\",className:\"notion-link\",children:\"Open in Notion\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"editor-content\",children:isEditing&&selectedPRD.is_local?/*#__PURE__*/_jsx(\"textarea\",{className:\"markdown-editor\",value:editorContent,onChange:e=>setEditorContent(e.target.value),placeholder:\"Write your PRD content in Markdown...\",disabled:saving}):/*#__PURE__*/_jsx(\"div\",{className:\"markdown-preview\",children:/*#__PURE__*/_jsx(\"pre\",{children:editorContent})})})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"no-selection\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Select a PRD to view or edit\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Choose a PRD from the sidebar or create a new one to get started.\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"prd-analysis\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"PRD Analysis\"}),/*#__PURE__*/_jsx(\"button\",{className:`analyze-btn ${isAnalyzing?'analyzing':''}`,onClick:startAnalysis,disabled:!selectedPRD||isAnalyzing,children:isAnalyzing?'Analyzing...':'Run Analysis'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-tabs\",children:[/*#__PURE__*/_jsx(\"button\",{className:`tab-btn ${activeTab==='analysis'?'active':''}`,onClick:()=>setActiveTab('analysis'),children:\"Analysis Results\"}),/*#__PURE__*/_jsx(\"button\",{className:`tab-btn ${activeTab==='logs'?'active':''}`,onClick:()=>setActiveTab('logs'),children:\"Graph Logs\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-content\",children:[activeTab==='analysis'&&/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-results\",children:[analysisError&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Error:\"}),\" \",analysisError]}),Object.keys(analysisResults).length===0&&!isAnalyzing&&!analysisError&&/*#__PURE__*/_jsx(\"div\",{className:\"no-analysis\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Select any PRD (local or from Notion) and click \\\"Run Analysis\\\" to get AI-powered insights.\"})}),Object.entries(analysisResults).map(_ref=>{let[sectionName,section]=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-header\",children:[/*#__PURE__*/_jsx(\"h4\",{children:section.name}),/*#__PURE__*/_jsxs(\"span\",{className:`score-badge score-${section.score}`,children:[section.score,\"/5\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"section-analysis\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Analysis\"}),/*#__PURE__*/_jsx(\"p\",{children:section.analysis})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"section-recommendations\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Recommendations\"}),/*#__PURE__*/_jsx(\"div\",{className:\"recommendations-text\",children:section.recommendations})]})]},sectionName);}),finalReport&&/*#__PURE__*/_jsxs(\"div\",{className:\"final-report\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Final Report\"}),/*#__PURE__*/_jsx(\"div\",{className:\"report-content\",children:/*#__PURE__*/_jsx(\"pre\",{children:finalReport})})]})]}),activeTab==='logs'&&/*#__PURE__*/_jsx(\"div\",{className:\"analysis-logs\",children:analysisLogs.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"No analysis logs yet. Start an analysis to see real-time progress.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"logs-content\",children:analysisLogs.map((log,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"log-entry\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"log-timestamp\",children:new Date().toLocaleTimeString()}),/*#__PURE__*/_jsx(\"span\",{className:\"log-message\",children:log})]},index))})})]})]}),showNewPRDModal&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"modal-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Create New PRD\"}),/*#__PURE__*/_jsx(\"button\",{className:\"close-btn\",onClick:()=>setShowNewPRDModal(false),disabled:saving,children:\"\\xD7\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"modal-content\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"prd-title-input\",placeholder:\"Enter PRD title...\",value:newPRDTitle,onChange:e=>setNewPRDTitle(e.target.value),onKeyPress:e=>e.key==='Enter'&&!saving&&createNewPRD(),autoFocus:true,disabled:saving})}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"cancel-btn\",onClick:()=>setShowNewPRDModal(false),disabled:saving,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{className:\"create-btn\",onClick:createNewPRD,disabled:!newPRDTitle.trim()||saving,children:saving?'Creating...':'Create PRD'})]})]})})]});};export default PRDReviewPage;","map":{"version":3,"names":["React","useState","useEffect","notionAPI","prdAPI","prdAnalysisAPI","PageType","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PRDReviewPage","notionPRDs","setNotionPRDs","userPRDs","setUserPRDs","selectedPRD","setSelectedPRD","loading","setLoading","saving","setSaving","editorContent","setEditorContent","isEditing","setIsEditing","showNewPRDModal","setShowNewPRDModal","newPRDTitle","setNewPRDTitle","isAnalyzing","setIsAnalyzing","analysisResults","setAnalysisResults","analysisLogs","setAnalysisLogs","finalReport","setFinalReport","activeTab","setActiveTab","analysisError","setAnalysisError","loadAllPRDs","Promise","all","loadNotionPRDs","loadUserPRDs","error","console","response","getPages","prd","prdDocs","data","map","page","id","title","content","created_at","updated_at","is_local","notion_url","file_type","getPRDs","createNewPRD","trim","prdData","createPRD","newPRD","prev","alert","selectPRD","notionId","parseInt","replace","getPageDetails","savePRDChanges","prdId","updateData","updatePRD","updatedPRD","deletePRD","window","confirm","filter","p","startAnalysis","eventSource","analyzePRD","event","type","message","section","name","score","report","close","allPRDs","sort","a","b","Date","getTime","className","children","onClick","disabled","toLocaleDateString","e","stopPropagation","length","href","target","rel","value","onChange","placeholder","Object","keys","entries","_ref","sectionName","analysis","recommendations","log","index","toLocaleTimeString","onKeyPress","key","autoFocus"],"sources":["/Users/konstantinvaliotti/prdreview/frontend/src/components/PRDReviewPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { notionAPI, prdAPI, prdAnalysisAPI, PRDCreate, PRDUpdate, PRDResponse, AnalysisSection, AnalysisEvent } from '../services/api';\nimport { NotionPage, PRDDocument, PageType } from '../types';\nimport './PRDReviewPage.css';\n\nconst PRDReviewPage: React.FC = () => {\n  // State management\n  const [notionPRDs, setNotionPRDs] = useState<PRDDocument[]>([]);\n  const [userPRDs, setUserPRDs] = useState<PRDDocument[]>([]);\n  const [selectedPRD, setSelectedPRD] = useState<PRDDocument | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [editorContent, setEditorContent] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [showNewPRDModal, setShowNewPRDModal] = useState(false);\n  const [newPRDTitle, setNewPRDTitle] = useState('');\n  \n  // Analysis state\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResults, setAnalysisResults] = useState<Record<string, AnalysisSection>>({});\n  const [analysisLogs, setAnalysisLogs] = useState<string[]>([]);\n  const [finalReport, setFinalReport] = useState<string>('');\n  const [activeTab, setActiveTab] = useState<'analysis' | 'logs'>('analysis');\n  const [analysisError, setAnalysisError] = useState<string>('');\n\n  // Load PRDs on component mount\n  useEffect(() => {\n    loadAllPRDs();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Load all PRDs (both Notion and user-created)\n  const loadAllPRDs = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([loadNotionPRDs(), loadUserPRDs()]);\n    } catch (error) {\n      console.error('Failed to load PRDs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load PRDs from Notion\n  const loadNotionPRDs = async () => {\n    try {\n      const response = await notionAPI.getPages(PageType.prd, 100, 0);\n      const prdDocs: PRDDocument[] = response.data.map((page: NotionPage) => ({\n        id: `notion-${page.id}`,\n        title: page.title,\n        content: page.content || '',\n        created_at: page.created_at,\n        updated_at: page.updated_at,\n        is_local: false,\n        notion_url: page.notion_url,\n        file_type: 'text' as const,\n      }));\n      setNotionPRDs(prdDocs);\n    } catch (error) {\n      console.error('Failed to load Notion PRDs:', error);\n    }\n  };\n\n  // Load user-created PRDs from database\n  const loadUserPRDs = async () => {\n    try {\n      const response = await prdAPI.getPRDs();\n      const prdDocs: PRDDocument[] = response.data.map((prd: PRDResponse) => ({\n        id: `user-${prd.id}`,\n        title: prd.title,\n        content: prd.content || '',\n        created_at: prd.created_at,\n        updated_at: prd.updated_at,\n        is_local: true,\n        file_type: 'markdown' as const,\n      }));\n      setUserPRDs(prdDocs);\n    } catch (error) {\n      console.error('Failed to load user PRDs:', error);\n    }\n  };\n\n  // Create new PRD in database\n  const createNewPRD = async () => {\n    if (!newPRDTitle.trim()) return;\n\n    setSaving(true);\n    try {\n      const prdData: PRDCreate = {\n        title: newPRDTitle.trim(),\n        content: `# ${newPRDTitle.trim()}\\n\\n## Overview\\n\\nWrite your PRD content here...\\n\\n## Features\\n\\n## User Stories\\n\\n## Success Metrics\\n\\n`,\n      };\n\n      const response = await prdAPI.createPRD(prdData);\n      \n      // Convert to PRDDocument format\n      const newPRD: PRDDocument = {\n        id: `user-${response.data.id}`,\n        title: response.data.title,\n        content: response.data.content || '',\n        created_at: response.data.created_at,\n        updated_at: response.data.updated_at,\n        is_local: true,\n        file_type: 'markdown',\n      };\n\n      // Add to user PRDs and select it\n      setUserPRDs(prev => [newPRD, ...prev]);\n      setSelectedPRD(newPRD);\n      setEditorContent(newPRD.content || '');\n      setIsEditing(true);\n      setShowNewPRDModal(false);\n      setNewPRDTitle('');\n    } catch (error) {\n      console.error('Failed to create PRD:', error);\n      alert('Failed to create PRD. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Select a PRD document\n  const selectPRD = async (prd: PRDDocument) => {\n    setSelectedPRD(prd);\n    setIsEditing(prd.is_local);\n\n    if (prd.is_local) {\n      // For user-created PRDs, content is already available\n      setEditorContent(prd.content || '');\n    } else {\n      // Load detailed content for Notion PRDs\n      try {\n        const notionId = parseInt(prd.id.replace('notion-', ''));\n        const response = await notionAPI.getPageDetails(notionId);\n        setEditorContent(response.data.content || '');\n      } catch (error) {\n        console.error('Failed to load PRD details:', error);\n        setEditorContent(prd.content || '');\n      }\n    }\n  };\n\n  // Save PRD changes to database\n  const savePRDChanges = async () => {\n    if (!selectedPRD?.is_local) return;\n\n    setSaving(true);\n    try {\n      const prdId = parseInt(selectedPRD.id.replace('user-', ''));\n      const updateData: PRDUpdate = {\n        content: editorContent,\n      };\n\n      const response = await prdAPI.updatePRD(prdId, updateData);\n      \n      // Update the PRD in state\n      const updatedPRD: PRDDocument = {\n        ...selectedPRD,\n        content: response.data.content || '',\n        updated_at: response.data.updated_at,\n      };\n\n      setSelectedPRD(updatedPRD);\n      setUserPRDs(prev => \n        prev.map(prd => \n          prd.id === selectedPRD.id ? updatedPRD : prd\n        )\n      );\n\n      alert('PRD saved successfully!');\n    } catch (error) {\n      console.error('Failed to save PRD:', error);\n      alert('Failed to save PRD. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Delete a PRD\n  const deletePRD = async (prd: PRDDocument) => {\n    if (!prd.is_local) return;\n    \n    if (!window.confirm(`Are you sure you want to delete \"${prd.title}\"?`)) return;\n\n    try {\n      const prdId = parseInt(prd.id.replace('user-', ''));\n      await prdAPI.deletePRD(prdId);\n      \n      // Remove from state\n      setUserPRDs(prev => prev.filter(p => p.id !== prd.id));\n      \n      // Clear selection if this PRD was selected\n      if (selectedPRD?.id === prd.id) {\n        setSelectedPRD(null);\n        setEditorContent('');\n        setIsEditing(false);\n      }\n      \n      alert('PRD deleted successfully!');\n    } catch (error) {\n      console.error('Failed to delete PRD:', error);\n      alert('Failed to delete PRD. Please try again.');\n    }\n  };\n\n  // Start PRD analysis\n  const startAnalysis = () => {\n    if (!selectedPRD) {\n      alert('Please select a PRD to analyze');\n      return;\n    }\n\n    // Use the full PRD ID (includes 'user-' or 'notion-' prefix)\n    const prdId = selectedPRD.id;\n    \n    setIsAnalyzing(true);\n    setAnalysisResults({});\n    setAnalysisLogs([]);\n    setFinalReport('');\n    setAnalysisError('');\n\n    const eventSource = prdAnalysisAPI.analyzePRD(\n      prdId,\n      (event: AnalysisEvent) => {\n        switch (event.type) {\n          case 'status':\n          case 'action':\n            if (event.message) {\n              setAnalysisLogs(prev => [...prev, event.message!]);\n            }\n            break;\n            \n          case 'section_complete':\n            if (event.section) {\n              setAnalysisResults(prev => ({\n                ...prev,\n                [event.section!.name]: event.section!\n              }));\n              setAnalysisLogs(prev => [...prev, `✅ Completed ${event.section!.name} analysis (Score: ${event.section!.score}/5)`]);\n            }\n            break;\n            \n          case 'final_report':\n            if (event.report) {\n              setFinalReport(event.report);\n              setAnalysisLogs(prev => [...prev, '📊 Final report compiled']);\n            }\n            break;\n            \n          case 'complete':\n            setIsAnalyzing(false);\n            setAnalysisLogs(prev => [...prev, '🎉 Analysis complete!']);\n            break;\n            \n          case 'error':\n            setIsAnalyzing(false);\n            setAnalysisError(event.message || 'Unknown error occurred');\n            setAnalysisLogs(prev => [...prev, `❌ Error: ${event.message}`]);\n            break;\n        }\n      },\n      (error: string) => {\n        setIsAnalyzing(false);\n        setAnalysisError(error);\n        setAnalysisLogs(prev => [...prev, `❌ Connection error: ${error}`]);\n      }\n    );\n\n    // Cleanup function\n    return () => {\n      if (eventSource) {\n        eventSource.close();\n      }\n    };\n  };\n\n  // Get all PRDs sorted by update time\n  const allPRDs = [...userPRDs, ...notionPRDs].sort(\n    (a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n  );\n\n  return (\n    <div className=\"prd-review-page\">\n      {/* Left Sidebar - PRD List */}\n      <div className=\"prd-sidebar\">\n        <div className=\"sidebar-header\">\n          <h3>PRD Documents</h3>\n          <button \n            className=\"new-prd-btn\"\n            onClick={() => setShowNewPRDModal(true)}\n            disabled={saving}\n          >\n            + New PRD\n          </button>\n        </div>\n\n        <div className=\"prd-list\">\n          {loading && <div className=\"loading\">Loading PRDs...</div>}\n          \n          {allPRDs.map((prd) => (\n            <div\n              key={prd.id}\n              className={`prd-item ${selectedPRD?.id === prd.id ? 'selected' : ''}`}\n              onClick={() => selectPRD(prd)}\n            >\n              <div className=\"prd-item-header\">\n                <h4>{prd.title}</h4>\n                <div className=\"prd-badges\">\n                  {prd.is_local && <span className=\"badge local\">Local</span>}\n                  {!prd.is_local && <span className=\"badge notion\">Notion</span>}\n                </div>\n              </div>\n              <div className=\"prd-item-meta\">\n                <span className=\"date\">\n                  {new Date(prd.updated_at).toLocaleDateString()}\n                </span>\n                {prd.is_local && (\n                  <button\n                    className=\"delete-btn\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      deletePRD(prd);\n                    }}\n                    title=\"Delete PRD\"\n                  >\n                    🗑️\n                  </button>\n                )}\n              </div>\n            </div>\n          ))}\n\n          {allPRDs.length === 0 && !loading && (\n            <div className=\"empty-state\">\n              <p>No PRDs found.</p>\n              <p>Create a new PRD or import from Notion.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Central Editor Area */}\n      <div className=\"prd-editor\">\n        {selectedPRD ? (\n          <>\n            <div className=\"editor-header\">\n              <h2>{selectedPRD.title}</h2>\n              <div className=\"editor-actions\">\n                {selectedPRD.is_local && (\n                  <>\n                    <button\n                      className=\"save-btn\"\n                      onClick={savePRDChanges}\n                      disabled={!isEditing || saving}\n                    >\n                      {saving ? 'Saving...' : 'Save'}\n                    </button>\n                    <button\n                      className=\"edit-btn\"\n                      onClick={() => setIsEditing(!isEditing)}\n                      disabled={saving}\n                    >\n                      {isEditing ? 'Preview' : 'Edit'}\n                    </button>\n                  </>\n                )}\n                {selectedPRD.notion_url && (\n                  <a\n                    href={selectedPRD.notion_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"notion-link\"\n                  >\n                    Open in Notion\n                  </a>\n                )}\n              </div>\n            </div>\n\n            <div className=\"editor-content\">\n              {isEditing && selectedPRD.is_local ? (\n                <textarea\n                  className=\"markdown-editor\"\n                  value={editorContent}\n                  onChange={(e) => setEditorContent(e.target.value)}\n                  placeholder=\"Write your PRD content in Markdown...\"\n                  disabled={saving}\n                />\n              ) : (\n                <div className=\"markdown-preview\">\n                  <pre>{editorContent}</pre>\n                </div>\n              )}\n            </div>\n          </>\n        ) : (\n          <div className=\"no-selection\">\n            <h3>Select a PRD to view or edit</h3>\n            <p>Choose a PRD from the sidebar or create a new one to get started.</p>\n          </div>\n        )}\n      </div>\n\n      {/* Right Sidebar - Analysis */}\n      <div className=\"prd-analysis\">\n        <div className=\"analysis-header\">\n          <h3>PRD Analysis</h3>\n          <button\n            className={`analyze-btn ${isAnalyzing ? 'analyzing' : ''}`}\n            onClick={startAnalysis}\n            disabled={!selectedPRD || isAnalyzing}\n          >\n            {isAnalyzing ? 'Analyzing...' : 'Run Analysis'}\n          </button>\n        </div>\n\n        <div className=\"analysis-tabs\">\n          <button\n            className={`tab-btn ${activeTab === 'analysis' ? 'active' : ''}`}\n            onClick={() => setActiveTab('analysis')}\n          >\n            Analysis Results\n          </button>\n          <button\n            className={`tab-btn ${activeTab === 'logs' ? 'active' : ''}`}\n            onClick={() => setActiveTab('logs')}\n          >\n            Graph Logs\n          </button>\n        </div>\n\n        <div className=\"analysis-content\">\n          {activeTab === 'analysis' && (\n            <div className=\"analysis-results\">\n              {analysisError && (\n                <div className=\"error-message\">\n                  <strong>Error:</strong> {analysisError}\n                </div>\n              )}\n\n              {Object.keys(analysisResults).length === 0 && !isAnalyzing && !analysisError && (\n                <div className=\"no-analysis\">\n                  <p>Select any PRD (local or from Notion) and click \"Run Analysis\" to get AI-powered insights.</p>\n                </div>\n              )}\n\n              {Object.entries(analysisResults).map(([sectionName, section]) => (\n                <div key={sectionName} className=\"analysis-section\">\n                  <div className=\"section-header\">\n                    <h4>{section.name}</h4>\n                    <span className={`score-badge score-${section.score}`}>\n                      {section.score}/5\n                    </span>\n                  </div>\n                  \n                  <div className=\"section-analysis\">\n                    <h5>Analysis</h5>\n                    <p>{section.analysis}</p>\n                  </div>\n                  \n                  <div className=\"section-recommendations\">\n                    <h5>Recommendations</h5>\n                    <div className=\"recommendations-text\">\n                      {section.recommendations}\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              {finalReport && (\n                <div className=\"final-report\">\n                  <h4>Final Report</h4>\n                  <div className=\"report-content\">\n                    <pre>{finalReport}</pre>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'logs' && (\n            <div className=\"analysis-logs\">\n              {analysisLogs.length === 0 ? (\n                <p>No analysis logs yet. Start an analysis to see real-time progress.</p>\n              ) : (\n                <div className=\"logs-content\">\n                  {analysisLogs.map((log, index) => (\n                    <div key={index} className=\"log-entry\">\n                      <span className=\"log-timestamp\">\n                        {new Date().toLocaleTimeString()}\n                      </span>\n                      <span className=\"log-message\">{log}</span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* New PRD Modal */}\n      {showNewPRDModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <div className=\"modal-header\">\n              <h3>Create New PRD</h3>\n              <button\n                className=\"close-btn\"\n                onClick={() => setShowNewPRDModal(false)}\n                disabled={saving}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"modal-content\">\n              <input\n                type=\"text\"\n                className=\"prd-title-input\"\n                placeholder=\"Enter PRD title...\"\n                value={newPRDTitle}\n                onChange={(e) => setNewPRDTitle(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && !saving && createNewPRD()}\n                autoFocus\n                disabled={saving}\n              />\n            </div>\n            <div className=\"modal-actions\">\n              <button\n                className=\"cancel-btn\"\n                onClick={() => setShowNewPRDModal(false)}\n                disabled={saving}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"create-btn\"\n                onClick={createNewPRD}\n                disabled={!newPRDTitle.trim() || saving}\n              >\n                {saving ? 'Creating...' : 'Create PRD'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PRDReviewPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}