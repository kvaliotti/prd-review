version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatapp_postgres
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - chatapp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d chatdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: chatapp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatapp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: chatapp_backend
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://myuser:mypassword@postgres:5432/chatdb
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
      - RATE_LIMIT_ENABLED=true
      - METRICS_ENABLED=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - chatapp_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chatapp_frontend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    networks:
      - chatapp_network
    depends_on:
      - backend
    restart: unless-stopped

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: chatapp_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - chatapp_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: chatapp_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - chatapp_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: chatapp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - chatapp_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

networks:
  chatapp_network:
    driver: bridge
    name: chatapp_network

volumes:
  postgres_data:
    name: chatapp_postgres_data
  redis_data:
    name: chatapp_redis_data
  prometheus_data:
    name: chatapp_prometheus_data
  grafana_data:
    name: chatapp_grafana_data 